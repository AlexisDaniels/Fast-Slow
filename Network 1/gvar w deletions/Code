#### GVAR ONLY WITH DELETIONS####

####  NETWORK 1 - 3 CONDITIONS) ####
library("ggplot2")
library("qgraph")
library("igraph")
library("graphicalVAR")
library("psychonetrics")
library("tidyverse")
library("matrixStats")
library("lcsm")
library("growthcurver")
library("NetworkComparisonTest")
library("bootnet")
library("networktools")

graphicalVARsim_MultiTime <- function (nTime, beta, kappa, mean = rep(0, ncol(kappa)), init = mean, 
                                       warmup = 100, lbound = rep(-Inf, ncol(kappa)), 
                                       ubound = rep(Inf, ncol(kappa)),
                                       var_slow = c(3, 4), time_slow = c(5, 10)) {
  
  
  stopifnot(!missing(beta))
  stopifnot(!missing(kappa))
  ?stopifnot
  # number of nodes
  Nvar <- ncol(kappa)
  
  # first set of data points (0 unless specified)
  init <- rep(init, length = Nvar)
  ?rep
  # number of time points to simulate in total
  totTime <- nTime + warmup
  
  # empty data frame
  Data <- t(matrix(init, Nvar, totTime))
  ?t
  # inverse kappa matrix
  Sigma <- solve(kappa)
  ?solve
  
  for (t in 2:totTime) {
    for (n in 1:Nvar){
      
      # normal updating
      if (!(n %in% var_slow)){
        # temporal effect
        Data[t,n] <- mean[n] + t(beta %*% (Data[t - 1, ] - mean))[,n] + 
          # comtemp effect
          mvtnorm::rmvnorm(1, rep(0, Nvar), Sigma)[,n]
        
        # slow updating
      } else {
        slow <- rep(rep(0:1, c(time_slow[match(n, var_slow)]-1,1)), length.out = totTime)
        if (slow[t-1] == 0){
          Data[t,n] <- Data[t - 1,n]
        } else if (slow[t-1] == 1){
          Data[t,n] <- mean[n] + t(beta %*% (Data[t - 1, ] - mean))[,n] + 
            mvtnorm::rmvnorm(1, rep(0, Nvar), Sigma)[,n]
        }
      }
    }
    
    Data[t, ] <- ifelse(Data[t, ] < lbound, lbound, Data[t,])
    
    Data[t, ] <- ifelse(Data[t, ] > ubound, ubound, Data[t,])
    
  }
  # return without warmup
  return(Data[-seq_len(warmup), , drop = FALSE])
}



pg_full <- read.csv('ESMdata.csv', sep = ",")
xvars <- c(
  'mood_relaxed',
  'mood_down',
  'mood_irritat',
  'mood_satisfi',
  'mood_lonely',
  'mood_anxious',
  'mood_enthus',
  'mood_suspic',
  'mood_cheerf',
  'mood_guilty',
  'mood_doubt',
  'mood_strong',
  'mor_feellike')  
mood_optimism <- pg_full[,c(5,6,11:22,71)]

xbeepvar <- 'beepno'
xdayvar <- 'dayno'
labels_short <- c(
  'relaxed',
  'down',
  'irritat',
  'satisfi',
  'lonely',
  'anxious',
  'enthus',
  'suspic',
  'cheerf',
  'guilty',
  'doubt',
  'strong',
  'optimism'
)

colnames(is.na(mood_optimism))
mood_optimism <- na.omit(mood_optimism) 
head(mood_optimism)
#View(mood_optimism)

colMeans(mood_optimism, na.rm = TRUE) #Optimism was the highest mean --> What to do here?

#Assumption checks: Multivariate normality and variance 
assumptionCheck(mood_optimism[,c(4,7,8,10,15)], type = "network", plot = TRUE)

#Delete repeated measurements
i <- 1
for (i in 1:nrow(mood_optimism)) {
  if(mood_optimism[i, colnames(mood_optimism) == "dayno"] == 
     mood_optimism[(i+1), colnames(mood_optimism) == "dayno"]) {
    mood_optimism[(i+1), c(15)] <- NA
  }
  else {
    mood_optimism[(i+1), c(15)] <- mood_optimism[(i+1), c(15)]
  }
  if (i == 889) {
    stop()
  }
}

#Disregard the error: it states that the last iteration couldn't be completed


#### CONDITION 1 ####
#### NETWORK 1 WITH DIFFERENT SLOW_VAR CONDITION ####

# NETWORK 1: Negative connectivity (optimism -> down-suspic-lonely-anxious)
# NETWORK 2: Positive connectivity (optimism -> satisfied-enthusiasm-cheerful-strong)
# NETWORK 3: Mild connectivity (optimism to doubt-irritable-guilty- relaxed)


#NETWORK 1 - Negative connectivity (optimism -> down-suspic-lonely-anxious)
#### TRUE NETWORK


#Form model
xvars1 <- c(
  'mood_down',
  'mood_lonely',
  'mood_anxious',
  'mood_suspic',
  'mor_feellike')

labels_short1 <- c(
  'down',
  'lonely',
  'anxious',
  'suspic',
  'optimism')

#Estimate model with FIML to account for missing data
mod1 <- gvar(mood_optimism,  vars = xvars1, beepvar = xbeepvar, dayvar = xdayvar, estimator = "FIML",
             standardize = "z")
# Use different optimizer since default ("nlminb") gives error (code from Alexis)
mod1 <- setoptimizer(mod1, optimizer = "nlminb") # note Alexis: #This optimizer is dependent on OS

# Run model and modelsearch (this takes a while):
# mod <- mod %>% prune %>% modelsearch # Error not positive semi-definite... different optimizer with setoptimizer(...)
mod1 <- mod1 %>% runmodel
#Let's look at the true network (Does it look like I expect it?) *Important step
#Select only the fast_variables? ####
layout(t(1:1))

temporal1 <- getmatrix(mod1, "PDC")
beta1 <- getmatrix(mod1, "beta")
contemporaneous1 <- getmatrix(mod1, "omega_zeta")
kappa1 <- contemporaneous1


true <- qgraph(temporal1, layout = layout, theme = "colorblind", 
                 directed = TRUE, diag = F, label.cex = 2, 
               title = "True Network 1 w Optimism (gvar)", labels = labels_short1, 
               vsize = 12, asize = 5, mar = rep(6,4), maximum = 0.263393)
layout <- true$layout


#Now, the true network without optimism
mod2 <- gvar(mood_optimism,  vars = xvars1[1:4], beepvar = xbeepvar, dayvar = xdayvar, 
             estimator = "FIML", standardize = "z")
# Use different optimizer since default ("nlminb") gives error (code from Alexis)
mod2 <- setoptimizer(mod2, optimizer = "nlminb") # note Alexis: #This optimizer is dependent on OS

# Run model and modelsearch (this takes a while):
# mod <- mod %>% prune %>% modelsearch # Error not positive semi-definite... different optimizer with setoptimizer(...)
mod2 <- mod2 %>% runmodel
#Let's look at the true network (Does it look like I expect it?) *Important step
#Select only the fast_variables? ####
layout(t(1:1))

temporal2 <- getmatrix(mod2, "PDC")
beta2 <- getmatrix(mod2, "beta")
contemporaneous2 <- getmatrix(mod2, "omega_zeta")
kappa2 <- contemporaneous2


true2 <- qgraph(temporal2, layout = layout[1:4,], theme = "colorblind", 
               directed = TRUE, diag = F, label.cex = 2, 
               title = "True Network 1 w/o Optimism (gvar)", labels = labels_short1[1:4], 
               vsize = 12, asize = 5, mar = rep(6,4), maximum = 0.263393)


#Simulate data from true network
#Estimate network with optimism
sim1 <- graphicalVARsim_MultiTime(1500, beta1, kappa1, var_slow = 5, time_slow = 5)
head(sim1)
colnames(sim1) <- xvars1

#Estimate model with FIML to account for missing data
sim1_mod <- gvar(sim1,  vars = xvars1, estimator = "FIML", standardize = "z")
# Use different optimizer since default ("nlminb") gives error (code from Alexis)
sim1_mod <- setoptimizer(sim1_mod, optimizer = "nlminb") # note Alexis: #This optimizer is dependent on OS

# Run model and modelsearch (this takes a while):
# mod <- mod %>% prune %>% modelsearch # Error not positive semi-definite... different optimizer with setoptimizer(...)
sim1_mod <- sim1_mod %>% runmodel
#Let's look at the true network (Does it look like I expect it?) *Important step
#Select only the fast_variables? ####
layout(t(1:1))

temporal_sim1 <- getmatrix(sim1_mod, "PDC")

sim1_plot1 <- qgraph(temporal1, layout = layout, theme = "colorblind", 
               directed = TRUE, diag = F, label.cex = 2, 
               title = "Sim from True Network 1 w Optimism", labels = labels_short1, 
               vsize = 12, asize = 5, mar = rep(6,4), maximum = 0.263393)


#Estimate network without optimism
sim2_mod <- gvar(sim1,  vars = xvars1[1:4], estimator = "FIML", standardize = "z")
# Use different optimizer since default ("nlminb") gives error (code from Alexis)
sim2_mod <- setoptimizer(sim2_mod, optimizer = "nlminb") # note Alexis: #This optimizer is dependent on OS

# Run model and modelsearch (this takes a while):
# mod <- mod %>% prune %>% modelsearch # Error not positive semi-definite... different optimizer with setoptimizer(...)
sim2_mod <- sim2_mod %>% runmodel
#Let's look at the true network (Does it look like I expect it?) *Important step
#Select only the fast_variables? ####
layout(t(1:1))

temporal_sim2 <- getmatrix(sim2_mod, "PDC")

sim1_plot2 <- qgraph(temporal2, layout = layout[1:4,], theme = "colorblind", 
                    directed = TRUE, diag = F, label.cex = 2, 
                    title = "Sim from True Network 1 w/o Optimism", labels = labels_short1[1:4], 
                    vsize = 12, asize = 5, mar = rep(6,4), maximum = 0.263393)




#NETWORK 1 - Negative connectivity (optimism -> down-suspic-lonely-anxious)
#### CONDITION 2 - Constantly low optimism ####

beta_low_1 <- beta1
beta_low_1[,5] <- beta_low_1[,5] * 0.5
beta_low_1[5,1:4] <- beta_low_1[5,1:4] * 0.5
beta_low_1 == beta1

# Simulate data with modifying 'mean' argument
low_sim_gvar_1 <- graphicalVARsim_MultiTime(1500, beta_low_1, kappa1, mean = c(0,0,0,0,0),
                                       var_slow = 5, time_slow = c(5))  #MultiTime simulation

#Delete repeated measurements

vector <- sort(c(seq(2,1500, 5), seq(3,1500, 5),
                 seq(4,1500, 5), seq(5,1500, 5)))
low_sim_gvar_1[vector, 5] <- NA

#View(low_sim_gvar_1)
colnames(low_sim_gvar_1) <- xvars1
# Set optimism mean to low 
# Explore simulated data

tail(low_sim_gvar_1)
colMeans(low_sim_gvar_1, na.rm = TRUE)
colVars(low_sim_gvar_1, na.rm = TRUE)

#NETWORK 1 - Negative connectivity (optimism -> down-suspic-lonely-anxious)
#### CONDITION 2 - Constantly low optimism ####

#1 - Calculate network WITH optimism
#Estimate model with FIML to account for missing data
gvar1_w <- gvar(low_sim_gvar_1, vars = xvars1, estimator = "FIML", standardize = "z")

# Use different optimizer since default ("nlminb") gives error (code from Alexis)
gvar1_w <- setoptimizer(gvar1_w, optimizer = "nlminb") # note Alexis: #This optimizer is dependent on OS

# Run model and modelsearch (this takes a while):
# mod <- mod %>% prune %>% modelsearch # Error not positive semi-definite... different optimizer with setoptimizer(...)
gvar1_w <- gvar1_w %>% runmodel
#Let's look at the true network (Does it look like I expect it?) *Important step
#Select only the fast_variables? ####

temporal_gvar1_w <- getmatrix(gvar1_w, "PDC")
beta_gvar1_w <- getmatrix(gvar1_w, "beta")
contemporaneous_gvar1_w <- getmatrix(gvar1_w, "omega_zeta")
kappa_gvar1_w <- contemporaneous_gvar1_w
#Sacha said: don't worry for "Model did not converge in inner loop"

layout(t(1:2))

temp_low_sim_gvar_1_w <- qgraph(temporal_gvar1_w, layout = true$layout, theme = "colorblind", 
                               directed = TRUE, diag = F, label.cex = 2, labels = labels_short1, 
                               title = "Sim from Network 3 w low Optimism",
                               vsize = 12, asize = 5, mar = rep(6,4), maximum = 0.263393)

#NETWORK 1 - Negative connectivity (optimism -> down-suspic-lonely-anxious)
#### CONDITION 2 - Constantly low optimism ####
#2 - Calculate network WITHOUT optimism
#Estimate model with FIML to account for missing data
gvar1_wo <- gvar(low_sim_gvar_1,  vars = xvars1[1:4], estimator = "FIML", standardize = "z")

# Use different optimizer since default ("nlminb") gives error (code from Alexis)
gvar1_wo <- setoptimizer(gvar1_wo, optimizer = "nlminb") # note Alexis: #This optimizer is dependent on OS

# Run model and modelsearch (this takes a while):
# mod <- mod %>% prune %>% modelsearch # Error not positive semi-definite... different optimizer with setoptimizer(...)
gvar1_wo <- gvar1_wo %>% runmodel
#Let's look at the true network (Does it look like I expect it?) *Important step
#Select only the fast_variables? ####

temporal_gvar1_wo <- getmatrix(gvar1_wo, "PDC")
beta_gvar1_wo <- getmatrix(gvar1_wo, "beta")
contemporaneous_gvar1_wo <- getmatrix(gvar1_wo, "omega_zeta")
kappa_gvar1_wo <- contemporaneous_gvar1_wo
#Sacha said: don't worry for "Model did not converge in inner loop"


#Compare (true) simulated network w/optimism to the simulated network w/o optimism

temp_low_sim_gvar_1_wo <- qgraph(temporal_gvar1_wo, layout = true$layout[1:4,], theme = "colorblind", 
                                directed = TRUE, diag = F, label.cex = 2, mar = rep(6,4),
                                labels = labels_short1[1:4], vsize = 12, asize = 5, 
                                title = "Sim from Network 3 w/o low Optimism", maximum = 0.263393)


#NETWORK 1 - Negative connectivity (optimism -> down-suspic-lonely-anxious)
#### CONDITION 3 - Constantly high optimism ####

#Example with slow variable set as constantly low

beta_high_1 <- beta1
beta_high_1[,5] <- beta_high_1[,5] * 1.5
beta_high_1[5,1:4] <- beta_high_1[5,1:4] * 1.5
beta_high_1 == beta1

#Simulate data with new beta matrix
high_sim_gvar_1 <- graphicalVARsim_MultiTime(1500, beta_high_1, kappa1, mean = c(0,0,0,0,0),
                                        var_slow = 5, time_slow = c(5))  #MultiTime simulation
colnames(high_sim_gvar_1) <- xvars1
#View(high_sim_gvar_1)
high_sim_gvar_1[vector, 5] <- NA

colMeans(high_sim_gvar_1, na.rm = TRUE)

#### CONDITION 3 - Constantly high optimism ####
#Calculate network WITH optimism
#Estimate model with FIML to account for missing data
gvar2_w <- gvar(high_sim_gvar_1,  vars = xvars1, estimator = "FIML", standardize = "z")

# Use different optimizer since default ("nlminb") gives error (code from Alexis)
gvar2_w <- setoptimizer(gvar2_w, optimizer = "nlminb") # note Alexis: #This optimizer is dependent on OS

# Run model and modelsearch (this takes a while):
# mod <- mod %>% prune %>% modelsearch # Error not positive semi-definite... different optimizer with setoptimizer(...)
gvar2_w <- gvar2_w %>% runmodel

#Select only the fast_variables? ####

temporal_gvar2_w <- getmatrix(gvar2_w, "PDC")
beta_gvar2_w <- getmatrix(gvar2_w, "beta")
contemporaneous_gvar2_w <- getmatrix(gvar2_w, "omega_zeta")
kappa_gvar2_w <- contemporaneous_gvar2_w

#Compare (true) simulated network w/optimism to the simulated network w/o optimism
layout(t(1:2))

temp_high_sim_gvar_2_w <- qgraph(temporal_gvar2_w, layout = true$layout, theme = "colorblind", 
                                directed = TRUE, diag = F, label.cex = 2, labels = labels_short1, 
                                title = "Sim from Network 3 w high Optimism",
                                vsize = 12, asize = 5, mar = rep(6,4), maximum = 0.263393)


#NETWORK 1 - Negative connectivity (optimism -> down-suspic-lonely-anxious)
#### CONDITION 3 - Constantly high optimism ####
#2- Calculate network WITHOUT optimism

#Estimate model with FIML to account for missing data
gvar2_wo <- gvar(high_sim_gvar_1,  vars = xvars1[1:4], estimator = "FIML", standardize = "z")

# Use different optimizer since default ("nlminb") gives error (code from Alexis)
gvar2_wo <- setoptimizer(gvar2_wo, optimizer = "nlminb") # note Alexis: #This optimizer is dependent on OS

# Run model and modelsearch (this takes a while):
# mod <- mod %>% prune %>% modelsearch # Error not positive semi-definite... different optimizer with setoptimizer(...)
gvar2_wo <- gvar2_wo %>% runmodel
#Let's look at the true network (Does it look like I expect it?) *Important step
#Select only the fast_variables? ####

temporal_gvar2_wo <- getmatrix(gvar2_wo, "PDC")
beta_gvar2_wo <- getmatrix(gvar2_wo, "beta")
contemporaneous_gvar2_wo <- getmatrix(gvar2_wo, "omega_zeta")
kappa_gvar2_wo <- contemporaneous_gvar2_wo
#Sacha said: don't worry for "Model did not converge in inner loop"


#Compare (true) simulated network w/optimism to the simulated network w/o optimism

temp_high_sim_gvar_2_wo <- qgraph(temporal_gvar2_wo, layout = true$layout[1:4,], theme = "colorblind", 
                                 directed = TRUE, diag = F, label.cex = 2, mar = rep(6,4),
                                 labels = labels_short1[1:4], vsize = 12, asize = 5, 
                                 title = "Sim from Network 3 w/o high Optimism", maximum = 0.263393)


#Compare the true network and the three simulated networks
pdf('Network 1 (gvar- deletion) WITH MAXIMUM.pdf', width = 8, height = 4)
par(mfrow = c(4, 2))

plot(true)
plot(true2)
plot(sim1_plot1)
plot(sim1_plot2)
plot(temp_low_sim_gvar_1_w)
plot(temp_low_sim_gvar_1_wo)
plot(temp_high_sim_gvar_2_w)
plot(temp_high_sim_gvar_2_wo)

dev.off()

#Set maximum to the plots
#Don't look at the autocorrelations
diag(temporal1) <- 0
diag(temporal2) <- 0
diag(temporal_sim1) <- 0
diag(temporal_sim2) <- 0
diag(temporal_gvar1_w) <- 0
diag(temporal_gvar1_wo) <- 0
diag(temporal_gvar2_w) <- 0
diag(temporal_gvar2_wo) <- 0

#What is the maximum edge weight in the networks
sort((c(temporal1,
          temporal2,
          temporal_sim1,
          temporal_sim2,
          temporal_gvar1_w,
          temporal_gvar1_wo, 
          temporal_gvar2_w,
          temporal_gvar2_wo)))[c(1:5, 160:164)]



#These are the widest (strongest) edges *it can vary with each simulation* #Maybe bootstrap?
#1- Sim 3 w/    optimism -> suspicious
#2- Sim 3 w/o   down -> lonely
#3- Sim 3 w/    optimism -> down
#4- Sim 3 w/    optimism -> lonely
#5- Sim 1 w/o   down -> lonely
#6- True w/     optimism -> down




#To calculate centrality I should bootstrap with AND without maximum (100 times p/condition)
#Maybe I can also bootstrap the (strongest) edges



